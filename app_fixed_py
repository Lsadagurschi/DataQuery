import streamlit as st
import pandas as pd
import os
import sys
from dotenv import load_dotenv
import time
import datetime
import plotly.express as px
from pathlib import Path

# Ajuste de caminho para localizar os m√≥dulos
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)  # Adiciona o diret√≥rio atual ao path

# Carregar vari√°veis de ambiente
try:
    load_dotenv()
except:
    pass  # No .env file

# Fun√ß√£o para obter secrets do Streamlit
def get_secret(key, default=None):
    """Obt√©m um segredo do Streamlit Cloud ou vari√°vel de ambiente"""
    try:
        if "secrets" in dir(st) and key in st.secrets:
            return st.secrets[key]
    except:
        pass
    return os.getenv(key, default)

# Configura√ß√µes
JWT_SECRET_KEY = get_secret("JWT_SECRET_KEY", "seu_jwt_secret_super_secreto_123")
ENCRYPTION_KEY = get_secret("ENCRYPTION_KEY", "sua_chave_de_criptografia_super_segura_456")

# Configura√ß√£o b√°sica do Streamlit
st.set_page_config(
    page_title="DataTalk - Consulta SQL por Linguagem Natural", 
    page_icon="üí¨", 
    layout="wide"
)

# Inicializar estados da sess√£o se n√£o existirem
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'is_connected' not in st.session_state:
    st.session_state.is_connected = False
if 'is_demo' not in st.session_state:
    st.session_state.is_demo = False
if 'current_sql' not in st.session_state:
    st.session_state.current_sql = None
if 'current_results' not in st.session_state:
    st.session_state.current_results = None
if 'query_history' not in st.session_state:
    st.session_state.query_history = []

# Fun√ß√£o para verificar autentica√ß√£o
def check_authentication():
    if "authenticated" in st.session_state and st.session_state.authenticated:
        # Atualizar timestamp de √∫ltima atividade
        st.session_state.last_activity = time.time()
        return True
    return False

# Fun√ß√£o para exibir o cabe√ßalho
def display_header():
    col1, col2 = st.columns([1, 5])
    with col1:
        st.write("üí¨")  # Emoji como logo
    with col2:
        st.title("DataTalk")
        st.write("Consulte seu banco de dados usando linguagem natural")
    st.divider()

# Fun√ß√£o para p√°gina de login
def show_login_page():
    st.title("DataTalk - Login")
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")
        
        if submit:
            # Em um ambiente real, verificaria contra banco de dados
            # Aqui vamos usar um usu√°rio de teste
            if username == "admin" and password == "admin":
                user_data = {
                    "username": username,
                    "role": "admin",
                    "permissions": ["query", "connect", "visualize"]
                }
                st.session_state.authenticated = True
                st.session_state.user = user_data
                st.session_state.last_activity = time.time()
                
                st.success("Login realizado com sucesso!")
                st.experimental_rerun()
            else:
                st.error("Usu√°rio ou senha inv√°lidos")

# Fun√ß√£o para exibir a pol√≠tica de privacidade
def show_privacy_policy():
    st.subheader("Pol√≠tica de Privacidade")
    
    st.markdown("""
    **Pol√≠tica de Privacidade e Termos de Uso - DataTalk**
    
    Esta pol√≠tica descreve como a aplica√ß√£o DataTalk coleta, usa e protege seus dados.
    
    **Coleta de Dados:**
    - A aplica√ß√£o n√£o armazena dados consultados, apenas processa temporariamente
    - Armazenamos logs de acesso e atividade por motivos de seguran√ßa
    - Suas credenciais de banco de dados s√£o utilizadas apenas para conex√£o e n√£o s√£o armazenadas permanentemente
    
    **Uso dos Dados:**
    - Os dados s√£o utilizados exclusivamente para fornecer o servi√ßo solicitado
    - N√£o compartilhamos suas informa√ß√µes com terceiros
    - Consultas s√£o processadas localmente e n√£o s√£o enviadas para servidores externos
    
    **Seus Direitos:**
    - Voc√™ pode solicitar a exclus√£o de todos os seus dados a qualquer momento
    - Voc√™ pode exportar seus registros de atividade
    - Voc√™ controla totalmente quais dados s√£o processados
    
    **Seguran√ßa:**
    - Utilizamos criptografia para proteger suas informa√ß√µes
    - Implementamos medidas t√©cnicas para garantir a integridade dos dados
    - Realizamos auditorias regulares de seguran√ßa
    """)
    
    if st.button("Aceitar Termos"):
        st.session_state.terms_accepted = True
        st.success("Termos aceitos. Obrigado!")
        st.experimental_rerun()

# Fun√ß√£o para solicitar exclus√£o de dados
def request_data_deletion():
    st.subheader("Solicitar Exclus√£o de Dados")
    
    st.write("""
    Ao solicitar a exclus√£o, todos os seus dados pessoais armazenados ser√£o
    permanentemente removidos do sistema, incluindo:
    
    - Hist√≥rico de consultas
    - Logs de acesso
    - Prefer√™ncias e configura√ß√µes
    """)
    
    if st.button("Solicitar Exclus√£o"):
        st.success("""
        Sua solicita√ß√£o foi registrada. Todos os seus dados ser√£o removidos em at√© 48 horas.
        Voc√™ receber√° uma confirma√ß√£o quando o processo for conclu√≠do.
        """)

# Fun√ß√£o para gerar SQL a partir da linguagem natural
def generate_sql_query(query):
    # L√≥gica simplificada para exemplo
    if "produtos" in query.lower() or "vendidos" in query.lower():
        sql = """
        SELECT p.product_name, SUM(oi.quantity) as total_vendas
        FROM products p
        JOIN order_items oi ON p.product_id = oi.product_id
        GROUP BY p.product_name
        ORDER BY total_vendas DESC
        LIMIT 5;
        """
    elif "clientes" in query.lower():
        sql = """
        SELECT c.first_name, c.last_name, COUNT(o.order_id) as num_pedidos
        FROM customers c
        JOIN orders o ON c.customer_id = o.customer_id
        GROUP BY c.first_name, c.last_name
        ORDER BY num_pedidos DESC
        LIMIT 10;
        """
    else:
        sql = """
        SELECT * 
        FROM products
        LIMIT 5;
        """
    
    return sql

# Fun√ß√£o para simular execu√ß√£o de consulta SQL
def execute_sql_query(sql_query):
    # Simula√ß√£o de resultados para demonstra√ß√£o
    if "products" in sql_query and "order_items" in sql_query:
        results = pd.DataFrame({
            'product_name': ['Notebook Pro', 'Smartphone X', 'Monitor 4K', 'Teclado Wireless', 'Mouse Gamer'],
            'total_vendas': [324, 286, 195, 178, 156]
        })
    elif "customers" in sql_query:
        results = pd.DataFrame({
            'first_name': ['Ana', 'Carlos', 'Maria', 'Jo√£o', 'Luciana'],
            'last_name': ['Silva', 'Oliveira', 'Santos', 'Pereira', 'Costa'],
            'num_pedidos': [8, 6, 5, 4, 3]
        })
    else:
        results = pd.DataFrame({
            'product_id': [1, 2, 3, 4, 5],
            'product_name': ['Notebook Pro', 'Smartphone X', 'Monitor 4K', 'Teclado Wireless', 'Mouse Gamer'],
            'price': [3999.99, 2499.99, 1299.99, 199.99, 149.99],
            'stock': [50, 100, 30, 80, 120]
        })
    
    return results

# Fun√ß√£o para adicionar √† hist√≥ria de consultas
def add_to_history(natural_query, sql_query, results):
    timestamp = time.strftime("%H:%M:%S")
    st.session_state.query_history.append({
        "timestamp": timestamp,
        "natural_query": natural_query,
        "sql_query": sql_query,
    })

# Fun√ß√£o principal
def main():
    # Verificar autentica√ß√£o
    if not check_authentication():
        show_login_page()
        return
    
    # Exibir cabe√ßalho da p√°gina
    display_header()

    # Sidebar para configura√ß√£o da conex√£o
    with st.sidebar:
        st.header("üîó Configura√ß√£o do Banco")
        
        db_type = st.selectbox(
            "Tipo de Banco de Dados",
            ["PostgreSQL", "MySQL", "SQL Server"],
            index=0
        )
        
        default_ports = {
            "PostgreSQL": "5432",
            "MySQL": "3306",
            "SQL Server": "1433"
        }
        
        host = st.text_input("Host", value="localhost")
        port = st.text_input("Porta", value=default_ports[db_type])
        database = st.text_input("Nome do Banco", value="neondb")
        username = st.text_input("Usu√°rio", value="postgres")
        password = st.text_input("Senha", type="password")
        
        connect_button = st.button("Conectar ao Banco")
        demo_button = st.button("Usar Modo Demo")
        
        if connect_button:
            # Simula√ß√£o de conex√£o para demonstra√ß√£o
            st.success("Conex√£o estabelecida com sucesso!")
            st.session_state.is_connected = True
            st.session_state.is_demo = False
        
        if demo_button:
            st.success("Modo de demonstra√ß√£o ativado!")
            st.session_state.is_demo = True
        
        if st.session_state.is_connected:
            st.markdown(f"""
            ‚úÖ Conectado
                Banco: {database}
                Servidor: {host}:{port}
            
            """)
        
        # Hist√≥rico de consultas
        if st.session_state.query_history:
            st.header("üìú Hist√≥rico de Consultas")
            for i, query in enumerate(reversed(st.session_state.query_history[-5:])):
                with st.expander(f"{query['timestamp']} - {query['natural_query'][:30]}..."):
                    st.code(query['sql_query'], language="sql")
        
        # Op√ß√µes de seguran√ßa e privacidade
        st.header("üîí Seguran√ßa e Privacidade")
        if st.button("Pol√≠tica de Privacidade"):
            show_privacy_policy()
            
        if st.button("Solicitar Exclus√£o de Dados"):
            request_data_deletion()
            
        # Op√ß√£o para logout
        if st.button("Sair"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.experimental_rerun()

    # √Årea principal para consultas
    if st.session_state.is_connected or st.session_state.is_demo:
        st.header("üí¨ Fa√ßa sua pergunta")
        
        # Input para a pergunta em linguagem natural
        natural_query = st.text_area(
            "O que voc√™ gostaria de saber sobre seus dados?",
            placeholder="Ex: Quais s√£o os 5 produtos mais vendidos?",
            height=100
        )
        
        # Bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            generate_button = st.button("Gerar SQL")
        with col2:
            execute_button = st.button("Executar Consulta")
        
        # L√≥gica para gerar SQL
        if generate_button and natural_query:
            with st.spinner("Gerando consulta SQL..."):
                sql_result = generate_sql_query(natural_query)
                st.session_state.current_natural_query = natural_query
                st.session_state.current_sql = sql_result
                st.success("SQL gerado com sucesso!")
        
        # L√≥gica para executar SQL
        if execute_button and st.session_state.current_sql:
            with st.spinner("Executando consulta..."):
                results = execute_sql_query(st.session_state.current_sql)
                st.session_state.current_results = results
                add_to_history(
                    st.session_state.current_natural_query,
                    st.session_state.current_sql,
                    results
                )
                st.success("Consulta executada com sucesso!")
        
        # Exibir resultados se dispon√≠veis
        if st.session_state.current_sql:
            tab1, tab2, tab3 = st.tabs(["üìä Resultados", "üìù SQL Gerado", "üìà Visualiza√ß√£o"])
            
            with tab1:
                if st.session_state.current_results is not None:
                    st.dataframe(st.session_state.current_results, use_container_width=True)
                    
                    # Mostrar estat√≠sticas b√°sicas
                    st.subheader("Estat√≠sticas")
                    st.write(f"Total de registros: {len(st.session_state.current_results)}")
                    
                    # Exportar op√ß√µes
                    if st.button("Exportar como CSV"):
                        csv = st.session_state.current_results.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            "Baixar CSV",
                            csv,
                            "dados.csv",
                            "text/csv",
                            key='download-csv'
                        )
                else:
                    st.info("Execute a consulta para ver os resultados aqui.")
                    
            with tab2:
                st.code(st.session_state.current_sql, language="sql")
                
            with tab3:
                if st.session_state.current_results is not None:
                    # Op√ß√µes de customiza√ß√£o do gr√°fico
                    st.subheader("Personalizar Gr√°fico")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        chart_type = st.selectbox(
                            "Tipo de Gr√°fico",
                            ["Barra", "Linha", "Pizza"],
                            key="chart_type"
                        )
                    
                    with col2:
                        if len(st.session_state.current_results.columns) > 0:
                            x_axis = st.selectbox(
                                "Eixo X",
                                st.session_state.current_results.columns,
                                key="x_axis"
                            )
                    
                    with col3:
                        if len(st.session_state.current_results.columns) > 0:
                            y_axis = st.selectbox(
                                "Eixo Y",
                                st.session_state.current_results.columns,
                                key="y_axis",
                                index=min(1, len(st.session_state.current_results.columns)-1)
                            )
                    
                    # Criar gr√°fico
                    if chart_type == "Barra":
                        st.bar_chart(
                            st.session_state.current_results.set_index(x_axis)[y_axis]
                        )
                    elif chart_type == "Linha":
                        st.line_chart(
                            st.session_state.current_results.set_index(x_axis)[y_axis]
                        )
                    else:  # Pizza
                        fig = px.pie(
                            st.session_state.current_results,
                            values=y_axis,
                            names=x_axis,
                            title=f'Distribui√ß√£o de {y_axis} por {x_axis}'
                        )
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("Execute a consulta para ver uma visualiza√ß√£o dos dados aqui.")
    else:
        # Demonstra√ß√£o quando n√£o estiver conectado
        st.info("üëà Conecte-se a um banco de dados ou ative o modo de demonstra√ß√£o para come√ßar.")
        
        st.header("üìå Como funciona")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("""
            ### 1Ô∏è‚É£ Conecte-se
            Conecte o DataTalk ao seu banco de dados atrav√©s das configura√ß√µes no menu lateral.
            """)
        with col2:
            st.markdown("""
            ### 2Ô∏è‚É£ Pergunte
            Fa√ßa perguntas em portugu√™s sobre seus dados, como "Quais s√£o os 10 clientes que mais compraram no √∫ltimo m√™s?"
            """)
        with col3:
            st.markdown("""
            ### 3Ô∏è‚É£ Analise
            Visualize os resultados em tabelas e gr√°ficos interativos para uma an√°lise completa.
            """)
        
        # Demonstra√ß√£o de consulta
        st.subheader("Exemplo de consulta")
        
        demo_query = "Quais s√£o os 5 produtos mais vendidos?"
        demo_sql = """
        SELECT p.product_name, SUM(oi.quantity) as total_sold
        FROM products p
        JOIN order_items oi ON p.product_id = oi.product_id
        GROUP BY p.product_name
        ORDER BY total_sold DESC
        LIMIT 5;
        """
        
        st.text_area("Pergunta em linguagem natural:", value=demo_query, disabled=True)
        st.code(demo_sql, language="sql")
        
        # Gr√°fico de exemplo
        demo_data = pd.DataFrame({
            'product_name': ['Notebook Pro', 'Smartphone X', 'Monitor 4K', 'Teclado Wireless', 'Mouse Gamer'],
            'total_sold': [324, 286, 195, 178, 156]
        })
        
        fig = px.bar(
            demo_data,
            x='product_name',
            y='total_sold',
            title='Top 5 Produtos Mais Vendidos',
            labels={'product_name': 'Produto', 'total_sold': 'Quantidade Vendida'},
            color='total_sold',
            color_continuous_scale='blues'
        )
        
        st.plotly_chart(fig, use_container_width=True)

    # Rodap√©
    st.divider()
    st.markdown("DataTalk ¬© 2025 - Consulta de banco de dados por linguagem natural | Em conformidade com a LGPD")

# Chamada principal
if __name__ == "__main__":
    main()
